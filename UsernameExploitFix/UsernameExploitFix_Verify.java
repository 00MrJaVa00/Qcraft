package pw.qcraft.qcraft.usernames.exploit.fix;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import org.apache.logging.log4j.core.Filter.Result;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Sound;
import org.bukkit.craftbukkit.libs.jline.internal.Log;
import org.bukkit.craftbukkit.v1_8_R3.entity.CraftPlayer;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.AsyncPlayerPreLoginEvent;
import org.bukkit.event.player.PlayerJoinEvent;

import pw.qcraft.qcraft.Arraylists.ArrayListManager;
import pw.qcraft.qcraft.Core.Main;

public class UsernameExploitFix_Verify implements Listener {
	private UsernameExploitFix UsernameExploitFix;
	public UsernameExploitFix_Verify(UsernameExploitFix UsernameExploitFix) {
		this.UsernameExploitFix = UsernameExploitFix;
	}
	private ArrayListManager arm;
	public UsernameExploitFix_Verify(ArrayListManager arm) {
		this.arm = arm;
	}
	ArrayList<String> usrfix = arm.Username_FIX;
	ArrayList<String> check = arm.Username_check;
	private Main main;
	public UsernameExploitFix_Verify(final Main main) {
		this.main = main;
	}	
	@EventHandler
	public void onJoinCheck(PlayerJoinEvent e) {
		Player p = e.getPlayer();
		if (main.getConfig().getString("Username_Exploit_Fix").contains("false")) {
			return;
		}
		if (main.getConfig().getString("Username_Exploit_Connection").contains("false")) {
			return;
		}
		//Check for unix strings
		try {
			String API = main.getConfig().getString("Username_Exploit_Verify") + p.getPlayer().getName();
    		URLConnection connection = new URL(API).openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.95 Safari/537.11");
            connection.connect();
            BufferedReader r  = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charset.forName("UTF-8")));
            StringBuilder sb = new StringBuilder();
            String line;
            while ((line = r.readLine()) != null) {
               sb.append(line);
            }
            String value = sb.toString();
            if (value.contains("true")) {
            	//Bukkit.broadcastMessage("[DEBUG] - USERNAME EXPLOIT SPOOF ID Within TRUE - " + Math.random());
            	return;
            } else {
            	if (usrfix.contains(p)) {
            		//Bukkit.broadcastMessage("[DEBUG] - USERNAME EXPLOIT SPOOF ID Within TRUE - " + Math.random());
            		Log.info("[Qcraft] - " + p.getPlayer().getName() + " Passed Username Exploit");
            		return;
            	}
            	//Bukkit.broadcastMessage("[DEBUG] - USERNAME EXPLOIT SPOOF ID Within FALSE - " + Math.random());
            	Log.info("[Qcraft] - " + p.getPlayer().getName() + " Failed Username Exploit (Auto ban enabled)");
            	usrfix.add(p.getPlayer().getName());
            	p.kickPlayer("Username Error");
            }
            		  }
            	          catch(IOException ex) {
            	        	  p.kickPlayer("Error checking if you are using exploits within username!");
            	        	 // Bukkit.broadcastMessage("[API ERROR] - " + ex.getStackTrace());
            	        	  return;
            	          }
	}
}
